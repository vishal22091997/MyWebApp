import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
 
import java.util.StringTokenizer;

public class UNIONSET {
	public static void main(String jdj[]) throws NumberFormatException, IOException{
		BufferedReader br = new BufferedReader(
                new InputStreamReader(System.in));

	 
		int t = Integer.parseInt(br.readLine());
		while(t-->0){
			StringTokenizer nk = new StringTokenizer(br.readLine());
			int n = Integer.parseInt(nk.nextToken()), k = Integer.parseInt(nk.nextToken());
			 
			boolean arr[][] = new boolean[n][k];
			for(int i=0;i<n;i++){
				StringTokenizer leni = new StringTokenizer(br.readLine());
				int len = Integer.parseInt(leni.nextToken());
				 
				 
				for(int j=0;j<len;j++){
					int cur = Integer.parseInt(leni.nextToken());
					arr[j][cur-1] = true;
				}
				List<Integer> temp = new ArrayList<Integer>();
				for(int j=1;j<=k;j++){
					if(check[j]!=true){
						temp.add(j);
					}
				}
				list.add(i, temp);
			}
			int count = 0;
			for(int i=0;i<n;i++){
				List<Integer> main = list.get(i);
				int mainLen = nums[i];
				if(mainLen==k){
					count+=n-i-1;
				}else{
					for(int j=i+1;j<n;j++){
						List<Integer> sec = list.get(j);
						int secLen = nums[j];
						if(secLen==k){
							count++;
							continue;
						}
						if(secLen+mainLen<k){
							continue;
						}else{
							boolean find = true;
							if(mainLen>secLen){
								// it means that main list has less missings
								for(int l=0,x=main.size();l<x;l++){
									if(sec.contains(main.get(l))){
										find = false;
										break;
									}
								}
							}else{
								for(int l = 0,x=sec.size();l<x;l++){
									if(main.contains(sec.get(l))){
										find = false;
										break;
									}
								}
							}
							if(find){
								count++;
							}
						}
						
					}
				}
			}
			System.out.println(count);
			
			
		}
	}

}
